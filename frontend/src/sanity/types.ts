/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type NewsletterSection = {
  _type: "newsletterSection";
  variant?: "default" | "highlight" | "minimal" | "full";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  inputPlaceholder?: string;
  buttonText?: string;
  buttonIcon?: "none" | "arrowRight" | "plus" | "mail";
  successMessage?: string;
  privacyText?: string;
};

export type ContactSection = {
  _type: "contactSection";
  badgeText?: string;
  heading?: string;
  description?: string;
  features?: Array<{
    title?: string;
    description?: string;
    _type: "feature";
    _key: string;
  }>;
  formTitle?: string;
  formFields?: {
    showDate?: "true" | "false";
    showFirstName?: "true" | "false";
    showLastName?: "true" | "false";
    showFileUpload?: "true" | "false";
    fileUploadLabel?: string;
  };
  buttonText?: string;
  buttonIcon?: "arrowRight" | "phone" | "none";
};

export type BlogSection = {
  _type: "blogSection";
  heading?: string;
  variant?: "default" | "grid";
  subheading?: string;
  postsToShow?: number;
  showFeaturedPostLarge?: "true" | "false";
  featuredPostsOnly?: "true" | "false";
  viewAllButton?: "true" | "false";
  viewAllUrl?: string;
  viewAllButtonText?: string;
};

export type FeatureSection = {
  _type: "featureSection";
  variant?: "default" | "withImage" | "leftImage" | "rightImage" | "imageCards" | "masonryGrid" | "bigMasonryGrid" | "carouselFeature" | "slidingComparison";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  comparisonImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  features?: Array<{
    title?: string;
    description?: string;
    icon?: "user" | "settings" | "lock" | "star" | "heart" | "barChart" | "dollar" | "calendar" | "clock" | "mail";
    highlighted?: "true" | "false";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _type: "feature";
    _key: string;
  }>;
};

export type FaqSection = {
  _type: "faqSection";
  variant?: "sideBySide" | "centered";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  buttonText?: string;
  buttonUrl?: string;
  buttonIcon?: "none" | "phone" | "arrowRight" | "plus" | "check";
  faqItems?: Array<{
    question?: string;
    answer?: string;
    _type: "faqItem";
    _key: string;
  }>;
};

export type CtaSection = {
  _type: "ctaSection";
  variant?: "default" | "highlight" | "minimal" | "full";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  buttons?: Array<{
    label?: string;
    url?: string;
    variant?: "default" | "secondary" | "outline" | "ghost" | "link";
    icon?: "none" | "arrowRight" | "phone" | "plus";
    _type: "button";
    _key: string;
  }>;
};

export type StatsSection = {
  _type: "statsSection";
  variant?: "grid" | "withContent";
  badgeText?: string;
  contentHeading?: string;
  contentText?: string;
  heading?: string;
  subheading?: string;
  stats?: Array<{
    value?: string;
    label?: string;
    trendDirection?: "up" | "down" | "none";
    trendValue?: string;
    color?: "primary" | "success" | "warning" | "destructive" | "muted";
    _type: "stat";
    _key: string;
  }>;
};

export type CompareFeaturesSection = {
  _type: "compareFeaturesSection";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  features?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "compareFeature";
  }>;
  plans?: Array<{
    title?: string;
    description?: string;
    price?: string;
    billingPeriod?: string;
    highlighted?: "true" | "false";
    featureValues?: Array<{
      featureRef?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "compareFeature";
      };
      value?: "true" | "false" | "custom";
      customText?: string;
      _type: "featureValue";
      _key: string;
    }>;
    buttonText?: string;
    buttonUrl?: string;
    buttonIcon?: "arrowRight" | "phone" | "plus";
    buttonVariant?: "default" | "secondary" | "outline" | "ghost" | "link";
    _type: "plan";
    _key: string;
  }>;
  footnote?: string;
};

export type PricingSection = {
  _type: "pricingSection";
  badgeText?: string;
  heading?: string;
  subheading?: string;
  plans?: Array<{
    title?: string;
    description?: string;
    highlighted?: "true" | "false";
    price?: string;
    billingPeriod?: string;
    features?: Array<{
      title?: string;
      description?: string;
      _type: "feature";
      _key: string;
    }>;
    buttonText?: string;
    buttonUrl?: string;
    buttonIcon?: "arrowRight" | "phone" | "plus";
    buttonVariant?: "default" | "outline" | "secondary";
    _type: "plan";
    _key: string;
  }>;
};

export type TestimonialsSection = {
  _type: "testimonialsSection";
  variant?: "carousel" | "grid" | "masonry-grid";
  heading?: string;
  subheading?: string;
  testimonials?: Array<{
    title?: string;
    content?: string;
    author?: string;
    role?: string;
    avatar?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _type: "testimonial";
    _key: string;
  }>;
};

export type CasesSection = {
  _type: "casesSection";
  variant?: "logoCarousel" | "compactSlider";
  heading?: string;
  subheading?: string;
  cases?: Array<{
    name?: string;
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    url?: string;
    _type: "caseItem";
    _key: string;
  }>;
};

export type HeroSection = {
  _type: "heroSection";
  variant?: "buttonBanner" | "badgeBanner" | "gridGallery";
  bannerButton?: {
    label?: string;
    url?: string;
  };
  badgeText?: string;
  heading?: string;
  subheading?: string;
  buttons?: Array<{
    label?: string;
    url?: string;
    variant?: "default" | "secondary" | "outline" | "ghost" | "link";
    icon?: "phone" | "arrowRight" | "plus" | "check" | "heart" | "star" | "search" | "settings" | "mail" | "calendar";
    _type: "button";
    _key: string;
  }>;
  media?: {
    type?: "image" | "video" | "placeholder";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    video?: {
      url?: string;
      autoplay?: "true" | "false";
      loop?: "true" | "false";
      muted?: "true" | "false";
    };
    additionalImages?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
  };
};

export type PortableText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    blank?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & CodeBlock | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
  _type: "image";
  _key: string;
}>;

export type CodeBlock = {
  _type: "codeBlock";
  title?: string;
  code?: Code;
  highlightLines?: string;
  showLineNumbers?: "true" | "false";
  caption?: string;
};

export type BlogPage = {
  _id: string;
  _type: "blogPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  layout?: "grid" | "featured" | "compact";
  postsPerPage?: number;
  featuredPostsCount?: number;
  showOnlyFeaturedPosts?: "true" | "false";
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  avatar?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  role?: string;
  bio?: string;
  fullBio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  socialLinks?: Array<{
    platform?: "twitter" | "linkedin" | "github" | "instagram" | "website" | "youtube";
    url?: string;
    username?: string;
    _type: "socialLink";
    _key: string;
  }>;
  email?: string;
};

export type BlogPost = {
  _id: string;
  _type: "blogPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishedAt?: string;
  excerpt?: string;
  authors?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  body?: PortableText;
  featured?: "true" | "false";
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  variant?: "simple" | "minimal" | "tiny";
  description?: string;
  address?: Array<string>;
  legalLinks?: Array<{
    title?: string;
    url?: string;
    _type: "link";
    _key: string;
  }>;
  navigationItems?: Array<{
    title?: string;
    href?: string;
    description?: string;
    items?: Array<{
      title?: string;
      href?: string;
      _type: "subItem";
      _key: string;
    }>;
    _type: "navigationItem";
    _key: string;
  }>;
};

export type Header = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  variant?: "default" | "centered" | "minimal" | "transparent";
  navigationItems?: Array<{
    title?: string;
    href?: string;
    description?: string;
    items?: Array<{
      title?: string;
      href?: string;
      _type: "subItem";
      _key: string;
    }>;
    _type: "navigationItem";
    _key: string;
  }>;
  ctaButtons?: Array<{
    label?: string;
    url?: string;
    variant?: "default" | "outline" | "secondary" | "ghost" | "link";
    _type: "button";
    _key: string;
  }>;
  dropdownCTALabel?: string;
  dropdownCTAUrl?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  pageBuilder?: Array<{
    _key: string;
  } & HeroSection | {
    _key: string;
  } & CasesSection | {
    _key: string;
  } & TestimonialsSection | {
    _key: string;
  } & PricingSection | {
    _key: string;
  } & CompareFeaturesSection | {
    _key: string;
  } & StatsSection | {
    _key: string;
  } & CtaSection | {
    _key: string;
  } & FaqSection | {
    _key: string;
  } & FeatureSection | {
    _key: string;
  } & BlogSection | {
    _key: string;
  } & ContactSection | {
    _key: string;
  } & NewsletterSection>;
};

export type CompareFeature = {
  _id: string;
  _type: "compareFeature";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | NewsletterSection | ContactSection | BlogSection | FeatureSection | FaqSection | CtaSection | StatsSection | CompareFeaturesSection | PricingSection | TestimonialsSection | CasesSection | HeroSection | PortableText | CodeBlock | BlogPage | Category | Author | BlogPost | Footer | Header | Page | CompareFeature | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/blog/page.tsx
// Variable: BLOG_PAGE_QUERY
// Query: *[_type == "blogPage"][0]{  title,  description,  layout,  postsPerPage,  featuredPostsCount,  showOnlyFeaturedPosts,  "seo": {    "metaTitle": seo.metaTitle,    "metaDescription": seo.metaDescription  }}
export type BLOG_PAGE_QUERYResult = {
  title: string | null;
  description: string | null;
  layout: "compact" | "featured" | "grid" | null;
  postsPerPage: number | null;
  featuredPostsCount: number | null;
  showOnlyFeaturedPosts: "false" | "true" | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
  };
} | null;
// Variable: COUNT_POSTS_QUERY
// Query: count(*[_type == "blogPost"])
export type COUNT_POSTS_QUERYResult = number;
// Variable: COUNT_FEATURED_POSTS_QUERY
// Query: count(*[_type == "blogPost" && featured == "true"])
export type COUNT_FEATURED_POSTS_QUERYResult = number;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"blogPage\"][0]{\n  title,\n  description,\n  layout,\n  postsPerPage,\n  featuredPostsCount,\n  showOnlyFeaturedPosts,\n  \"seo\": {\n    \"metaTitle\": seo.metaTitle,\n    \"metaDescription\": seo.metaDescription\n  }\n}": BLOG_PAGE_QUERYResult;
    "count(*[_type == \"blogPost\"])": COUNT_POSTS_QUERYResult;
    "count(*[_type == \"blogPost\" && featured == \"true\"])": COUNT_FEATURED_POSTS_QUERYResult;
  }
}
